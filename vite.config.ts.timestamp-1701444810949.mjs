// vite.config.ts
import { resolve } from "path";
import dts from "file:///Users/shyam/Documents/projects/react-router-prompt/node_modules/.pnpm/vite-plugin-dts@2.0.1_vite@4.1.1/node_modules/vite-plugin-dts/dist/index.mjs";
import tsConfigPaths from "file:///Users/shyam/Documents/projects/react-router-prompt/node_modules/.pnpm/vite-tsconfig-paths@4.0.5_typescript@5.0.2/node_modules/vite-tsconfig-paths/dist/index.mjs";

// package.json
var peerDependencies = {
  react: ">=16.8",
  "react-dom": ">=16.8",
  "react-router-dom": ">=6.7"
};

// vite.config.ts
import { defineConfig } from "file:///Users/shyam/Documents/projects/react-router-prompt/node_modules/.pnpm/vite@4.1.1_@types+node@18.13.0/node_modules/vite/dist/node/index.js";
import react from "file:///Users/shyam/Documents/projects/react-router-prompt/node_modules/.pnpm/@vitejs+plugin-react-swc@3.1.0_vite@4.1.1/node_modules/@vitejs/plugin-react-swc/index.mjs";
var __vite_injected_original_dirname = "/Users/shyam/Documents/projects/react-router-prompt";
var vite_config_default = defineConfig({
  plugins: [
    dts({
      include: ["src/"]
    }),
    react(),
    tsConfigPaths()
  ],
  build: {
    lib: {
      entry: resolve(__vite_injected_original_dirname, "src/index.tsx"),
      name: "ReactRouterPrompt",
      fileName: "react-router-prompt"
    },
    rollupOptions: {
      external: [...Object.keys(peerDependencies)]
    }
  },
  test: {
    environment: "happy-dom"
  }
});
export {
  vite_config_default as default
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsidml0ZS5jb25maWcudHMiLCAicGFja2FnZS5qc29uIl0sCiAgInNvdXJjZXNDb250ZW50IjogWyJjb25zdCBfX3ZpdGVfaW5qZWN0ZWRfb3JpZ2luYWxfZGlybmFtZSA9IFwiL1VzZXJzL3NoeWFtL0RvY3VtZW50cy9wcm9qZWN0cy9yZWFjdC1yb3V0ZXItcHJvbXB0XCI7Y29uc3QgX192aXRlX2luamVjdGVkX29yaWdpbmFsX2ZpbGVuYW1lID0gXCIvVXNlcnMvc2h5YW0vRG9jdW1lbnRzL3Byb2plY3RzL3JlYWN0LXJvdXRlci1wcm9tcHQvdml0ZS5jb25maWcudHNcIjtjb25zdCBfX3ZpdGVfaW5qZWN0ZWRfb3JpZ2luYWxfaW1wb3J0X21ldGFfdXJsID0gXCJmaWxlOi8vL1VzZXJzL3NoeWFtL0RvY3VtZW50cy9wcm9qZWN0cy9yZWFjdC1yb3V0ZXItcHJvbXB0L3ZpdGUuY29uZmlnLnRzXCI7aW1wb3J0IHsgcmVzb2x2ZSB9IGZyb20gXCJwYXRoXCI7XG5pbXBvcnQgZHRzIGZyb20gXCJ2aXRlLXBsdWdpbi1kdHNcIjtcbmltcG9ydCB0c0NvbmZpZ1BhdGhzIGZyb20gXCJ2aXRlLXRzY29uZmlnLXBhdGhzXCI7XG5pbXBvcnQgKiBhcyBwYWNrYWdlSnNvbiBmcm9tIFwiLi9wYWNrYWdlLmpzb25cIjtcblxuaW1wb3J0IHsgZGVmaW5lQ29uZmlnIH0gZnJvbSBcInZpdGVcIjtcbmltcG9ydCByZWFjdCBmcm9tIFwiQHZpdGVqcy9wbHVnaW4tcmVhY3Qtc3djXCI7XG5cbi8vIGh0dHBzOi8vdml0ZWpzLmRldi9jb25maWcvXG5leHBvcnQgZGVmYXVsdCBkZWZpbmVDb25maWcoe1xuICBwbHVnaW5zOiBbXG4gICAgZHRzKHtcbiAgICAgIGluY2x1ZGU6IFtcInNyYy9cIl0sXG4gICAgfSksXG4gICAgcmVhY3QoKSxcbiAgICB0c0NvbmZpZ1BhdGhzKCksXG4gIF0sXG4gIGJ1aWxkOiB7XG4gICAgbGliOiB7XG4gICAgICBlbnRyeTogcmVzb2x2ZShfX2Rpcm5hbWUsIFwic3JjL2luZGV4LnRzeFwiKSxcbiAgICAgIG5hbWU6IFwiUmVhY3RSb3V0ZXJQcm9tcHRcIixcbiAgICAgIGZpbGVOYW1lOiBcInJlYWN0LXJvdXRlci1wcm9tcHRcIixcbiAgICB9LFxuICAgIHJvbGx1cE9wdGlvbnM6IHtcbiAgICAgIGV4dGVybmFsOiBbLi4uT2JqZWN0LmtleXMocGFja2FnZUpzb24ucGVlckRlcGVuZGVuY2llcyldLFxuICAgIH0sXG4gIH0sXG4gIHRlc3Q6IHtcbiAgICBlbnZpcm9ubWVudDogXCJoYXBweS1kb21cIixcbiAgfSxcbn0pO1xuIiwgIntcbiAgXCJuYW1lXCI6IFwicmVhY3Qtcm91dGVyLXByb21wdFwiLFxuICBcInZlcnNpb25cIjogXCIwLjUuNFwiLFxuICBcImRlc2NyaXB0aW9uXCI6IFwiUmVhY3QgUm91dGVyIE5hdmlnYXRpb24gUHJvbXB0IGZvciB2NlwiLFxuICBcInR5cGVcIjogXCJtb2R1bGVcIixcbiAgXCJmaWxlc1wiOiBbXG4gICAgXCJkaXN0XCJcbiAgXSxcbiAgXCJtYWluXCI6IFwiLi9kaXN0L3JlYWN0LXJvdXRlci1wcm9tcHQudW1kLmNqc1wiLFxuICBcIm1vZHVsZVwiOiBcIi4vZGlzdC9yZWFjdC1yb3V0ZXItcHJvbXB0LmpzXCIsXG4gIFwidHlwZXNcIjogXCIuL2Rpc3QvaW5kZXguZC50c1wiLFxuICBcImV4cG9ydHNcIjoge1xuICAgIFwiLlwiOiB7XG4gICAgICBcImltcG9ydFwiOiBcIi4vZGlzdC9yZWFjdC1yb3V0ZXItcHJvbXB0LmpzXCIsXG4gICAgICBcInJlcXVpcmVcIjogXCIuL2Rpc3QvcmVhY3Qtcm91dGVyLXByb21wdC51bWQuY2pzXCIsXG4gICAgICBcInR5cGVzXCI6IFwiLi9kaXN0L2luZGV4LmQudHNcIlxuICAgIH1cbiAgfSxcbiAgXCJhdXRob3JcIjogXCJTaHlhbSBHdXB0YSAoc2h5YW1tQG91dGxvb2suY29tKVwiLFxuICBcImxpY2Vuc2VcIjogXCJNSVRcIixcbiAgXCJwcml2YXRlXCI6IGZhbHNlLFxuICBcInJlcG9zaXRvcnlcIjoge1xuICAgIFwidHlwZVwiOiBcImdpdFwiLFxuICAgIFwidXJsXCI6IFwiZ2l0K2h0dHBzOi8vZ2l0aHViLmNvbS9zc2h5YW0tZ3VwdGEvcmVhY3Qtcm91dGVyLXByb21wdC5naXRcIlxuICB9LFxuICBcImhvbWVwYWdlXCI6IFwiaHR0cHM6Ly9naXRodWIuY29tL3NzaHlhbS1ndXB0YS9yZWFjdC1yb3V0ZXItcHJvbXB0I3JlYWRtZVwiLFxuICBcImtleXdvcmRzXCI6IFtcbiAgICBcImNvbmZpcm1cIixcbiAgICBcIm5hdmlnYXRpb25cIixcbiAgICBcInByb21wdFwiLFxuICAgIFwicmVhY3RcIixcbiAgICBcInJvdXRlclwiXG4gIF0sXG4gIFwic2NyaXB0c1wiOiB7XG4gICAgXCJkZXZcIjogXCJ2aXRlXCIsXG4gICAgXCJidWlsZFwiOiBcInRzYyAmJiB2aXRlIGJ1aWxkXCIsXG4gICAgXCJsaW50XCI6IFwiZXNsaW50IHNyYyAtLWV4dCAuanMsLmpzeCwudHMsLnRzeFwiLFxuICAgIFwibGludDpmaXhcIjogXCJlc2xpbnQgc3JjIC0tZXh0IC5qcywuanN4LC50cywudHN4IC0tZml4XCIsXG4gICAgXCJmb3JtYXRcIjogXCJwcmV0dGllciBcXFwic3JjLyoqLyoue2pzLGpzeCx0cyx0c3gsY3NzLHNjc3N9XFxcIiAtLXdyaXRlXCIsXG4gICAgXCJjb21waWxlXCI6IFwidHNjXCIsXG4gICAgXCJwcmV2aWV3XCI6IFwidml0ZSBwcmV2aWV3XCIsXG4gICAgXCJ0ZXN0XCI6IFwidml0ZXN0XCIsXG4gICAgXCJzaXplXCI6IFwic2l6ZS1saW1pdFwiLFxuICAgIFwicHJlcHVibGlzaE9ubHlcIjogXCJ5YXJuIGJ1aWxkXCIsXG4gICAgXCJwcmVwYXJlXCI6IFwiaHVza3kgaW5zdGFsbFwiLFxuICAgIFwiY292ZXJhZ2VcIjogXCJ2aXRlc3QgcnVuIC0tY292ZXJhZ2VcIlxuICB9LFxuICBcImh1c2t5XCI6IHtcbiAgICBcImhvb2tzXCI6IHtcbiAgICAgIFwicHJlLWNvbW1pdFwiOiBcInBucG0gbGludFwiXG4gICAgfVxuICB9LFxuICBcImRldkRlcGVuZGVuY2llc1wiOiB7XG4gICAgXCJAc2l6ZS1saW1pdC9wcmVzZXQtc21hbGwtbGliXCI6IFwiXjguMS4yXCIsXG4gICAgXCJAdHlwZXMvcmVhY3RcIjogXCJeMTguMC4yOFwiLFxuICAgIFwiQHR5cGVzL3JlYWN0LWRvbVwiOiBcIl4xOC4wLjEwXCIsXG4gICAgXCJAdHlwZXNjcmlwdC1lc2xpbnQvZXNsaW50LXBsdWdpblwiOiBcIl41LjUxLjBcIixcbiAgICBcIkB0eXBlc2NyaXB0LWVzbGludC9wYXJzZXJcIjogXCJeNS41MS4wXCIsXG4gICAgXCJAdml0ZWpzL3BsdWdpbi1yZWFjdC1zd2NcIjogXCJeMy4xLjBcIixcbiAgICBcIkB2aXRlc3QvY292ZXJhZ2UtYzhcIjogXCJeMC4zMC4wXCIsXG4gICAgXCJlc2xpbnRcIjogXCJeOC4zNC4wXCIsXG4gICAgXCJlc2xpbnQtY29uZmlnLWFpcmJuYlwiOiBcIl4xOS4wLjRcIixcbiAgICBcImVzbGludC1jb25maWctYWlyYm5iLXR5cGVzY3JpcHRcIjogXCJeMTcuMC4wXCIsXG4gICAgXCJlc2xpbnQtY29uZmlnLXByZXR0aWVyXCI6IFwiXjguNi4wXCIsXG4gICAgXCJlc2xpbnQtcGx1Z2luLWltcG9ydFwiOiBcIl4yLjI3LjVcIixcbiAgICBcImVzbGludC1wbHVnaW4tanN4LWExMXlcIjogXCJeNi43LjFcIixcbiAgICBcImVzbGludC1wbHVnaW4tcHJldHRpZXJcIjogXCJeNC4yLjFcIixcbiAgICBcImVzbGludC1wbHVnaW4tcmVhY3RcIjogXCJeNy4zMi4yXCIsXG4gICAgXCJlc2xpbnQtcGx1Z2luLXJlYWN0LWhvb2tzXCI6IFwiXjQuNi4wXCIsXG4gICAgXCJoYXBweS1kb21cIjogXCJeOS4wLjBcIixcbiAgICBcImhpc3RvcnlcIjogXCJeNS4zLjBcIixcbiAgICBcImh1c2t5XCI6IFwiXjguMC4zXCIsXG4gICAgXCJwYXRoXCI6IFwiXjAuMTIuN1wiLFxuICAgIFwicHJldHRpZXJcIjogXCJeMi44LjRcIixcbiAgICBcInJlYWN0XCI6IFwiXjE4LjIuMFwiLFxuICAgIFwicmVhY3QtZG9tXCI6IFwiXjE4LjIuMFwiLFxuICAgIFwicmVhY3Qtcm91dGVyLWRvbVwiOiBcIl42LjguMVwiLFxuICAgIFwic2l6ZS1saW1pdFwiOiBcIl44LjEuMlwiLFxuICAgIFwidHNsaWJcIjogXCJeMi41LjBcIixcbiAgICBcInR5cGVzY3JpcHRcIjogXCJeNS4wLjBcIixcbiAgICBcInZpdGVcIjogXCJeNC4xLjFcIixcbiAgICBcInZpdGUtcGx1Z2luLWR0c1wiOiBcIl4yLjAuMFwiLFxuICAgIFwidml0ZS10c2NvbmZpZy1wYXRoc1wiOiBcIl40LjAuNVwiLFxuICAgIFwidml0ZXN0XCI6IFwiXjAuMzAuMFwiXG4gIH0sXG4gIFwicGVlckRlcGVuZGVuY2llc1wiOiB7XG4gICAgXCJyZWFjdFwiOiBcIj49MTYuOFwiLFxuICAgIFwicmVhY3QtZG9tXCI6IFwiPj0xNi44XCIsXG4gICAgXCJyZWFjdC1yb3V0ZXItZG9tXCI6IFwiPj02LjdcIlxuICB9LFxuICBcInNpemUtbGltaXRcIjogW1xuICAgIHtcbiAgICAgIFwicGF0aFwiOiBcImRpc3QvcmVhY3Qtcm91dGVyLXByb21wdC5qc1wiLFxuICAgICAgXCJsaW1pdFwiOiBcIjUgS0JcIlxuICAgIH0sXG4gICAge1xuICAgICAgXCJwYXRoXCI6IFwiZGlzdC9yZWFjdC1yb3V0ZXItcHJvbXB0LnVtZC5janNcIixcbiAgICAgIFwibGltaXRcIjogXCI4IEtCXCJcbiAgICB9XG4gIF1cbn1cbiJdLAogICJtYXBwaW5ncyI6ICI7QUFBMlUsU0FBUyxlQUFlO0FBQ25XLE9BQU8sU0FBUztBQUNoQixPQUFPLG1CQUFtQjs7O0FDbUZ4Qix1QkFBb0I7QUFBQSxFQUNsQixPQUFTO0FBQUEsRUFDVCxhQUFhO0FBQUEsRUFDYixvQkFBb0I7QUFDdEI7OztBRHBGRixTQUFTLG9CQUFvQjtBQUM3QixPQUFPLFdBQVc7QUFObEIsSUFBTSxtQ0FBbUM7QUFTekMsSUFBTyxzQkFBUSxhQUFhO0FBQUEsRUFDMUIsU0FBUztBQUFBLElBQ1AsSUFBSTtBQUFBLE1BQ0YsU0FBUyxDQUFDLE1BQU07QUFBQSxJQUNsQixDQUFDO0FBQUEsSUFDRCxNQUFNO0FBQUEsSUFDTixjQUFjO0FBQUEsRUFDaEI7QUFBQSxFQUNBLE9BQU87QUFBQSxJQUNMLEtBQUs7QUFBQSxNQUNILE9BQU8sUUFBUSxrQ0FBVyxlQUFlO0FBQUEsTUFDekMsTUFBTTtBQUFBLE1BQ04sVUFBVTtBQUFBLElBQ1o7QUFBQSxJQUNBLGVBQWU7QUFBQSxNQUNiLFVBQVUsQ0FBQyxHQUFHLE9BQU8sS0FBaUIsZ0JBQWdCLENBQUM7QUFBQSxJQUN6RDtBQUFBLEVBQ0Y7QUFBQSxFQUNBLE1BQU07QUFBQSxJQUNKLGFBQWE7QUFBQSxFQUNmO0FBQ0YsQ0FBQzsiLAogICJuYW1lcyI6IFtdCn0K
